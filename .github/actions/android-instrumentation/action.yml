name: "Run Instrumentation Tests"
description: "Builds maven artifacts and creates the local snapshots."

inputs:
  android-version:
    description: "Android API level to use for the device running the test."
    required: true
  gradle-tasks:
    description: "What tasks to run in Gradle."
    required: false
    default: 'connectedCheck'
  gradle-flags:
    description: |
      Which command line flags to pass to Gradle.
      '--continue --stacktrace --no-daemon' are hardcoded and cannot be changed.
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: "Calculate emulator parameters."
      id: emu
      shell: sh
      run: |
        # This is the main input, just alias it for consistent usage.
        echo "api-level=${{ inputs.android-version }}" \
            | tee -a "$GITHUB_OUTPUT"
        
        # TODEL Some are not available: https://issuetracker.google.com/issues/267458959
        echo "target=${{ inputs.android-version >= 32 && 'google_apis' || 'default' }}" \
            | tee -a "$GITHUB_OUTPUT"
        
        # Some older APIs don't have x86_64 images, if we go low enough even x86 is a luxury.
        echo "arch=${{ inputs.android-version >= 21 && 'x86_64' || 'x86' }}"  \
            | tee -a "$GITHUB_OUTPUT"
        
        # Use an explicit profile, which one doesn't really matter, but the
        # default emulator profile is definitely not feasible because it has very strange hardware.
        echo "profile=pixel" \
            | tee -a "$GITHUB_OUTPUT"
        
        # Default: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
        echo "emulator-options=-no-window -gpu swiftshader_indirect -noaudio -no-boot-anim" \
            | tee -a "$GITHUB_OUTPUT"

    - name: "Cache AVD images."
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/
        key: avd-android-${{ steps.emu.outputs.api-level }};${{ steps.emu.outputs.target }};${{ steps.emu.outputs.arch }}-${{ steps.emu.outputs.profile }}

    - name: "Run emulator to generate AVD."
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ steps.emu.outputs.api-level }}
        target: ${{ steps.emu.outputs.target }}
        arch: ${{ steps.emu.outputs.arch }}
        profile: ${{ steps.emu.outputs.profile }}
        emulator-options: ${{ steps.emu.outputs.emulator-options }} -no-snapshot-load
        script: echo "Generated AVD snapshot for caching."

    - name: "Run Instrumentation Tests on emulator."
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ steps.emu.outputs.api-level }}
        target: ${{ steps.emu.outputs.target }}
        arch: ${{ steps.emu.outputs.arch }}
        profile: ${{ steps.emu.outputs.profile }}
        emulator-options: ${{ steps.emu.outputs.emulator-options }} -no-snapshot-save
        pre-emulator-launch-script: |
          adb --version
        script: |
          # List current devices
          adb devices -l
          
          # Capture logcat output from "Launch Emulator" to a file.
          adb logcat -d > emulator-startup.log
          # Shorten the logcat output, by truncating at this point, the relevant part is yet to come.
          # Best effort, could fail with "failed to clear the 'main' log",
          # because something is locking logcat, so try a few times, and ignore errors each time.
          adb logcat -c || true
          adb logcat -c || true
          adb logcat -c || true
          # Capture full logcat output to a file.
          adb logcat > emulator.log & echo $! > logcat_file.pid
          # Output instrumentation test logs to the GitHub Actions output.
          adb logcat "*:S MonitoringInstr:V AndroidJUnitRunner:V TestRequestBuilder:V TestExecutor:V TestRunner:V" --format=color & echo $! > logcat_console.pid
          
          echo 0 > gradle.exit # Set a default exit code.
          # Run the actual tests (suppress build failures by saving the exit code).
          ./gradlew --continue --stacktrace --no-daemon ${{ inputs.gradle-flags }} ${{ inputs.gradle-tasks }} || echo $? > gradle.exit
          
          # Stop capturing logcat output.
          kill $(cat logcat_file.pid)    || echo "::warning Logcat process $(cat logcat_file.pid) didn't exist for ${{ inputs.android-version }}."
          kill $(cat logcat_console.pid) || echo "::warning Logcat process $(cat logcat_console.pid) didn't exist for ${{ inputs.android-version }}."
          # Make sure the step fails if the tests failed.
          exit $(cat gradle.exit)

    - name: "Upload 'Instrumentation Test Results ${{ inputs.android-version }}' artifact."
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: 'Instrumentation Test Results ${{ inputs.android-version }}'
        path: |
          ${{ github.workspace }}/**/build/outputs/androidTest-results/connected/flavors/debugAndroidTest/
          ${{ github.workspace }}/**/build/reports/androidTests/connected/flavors/debugAndroidTest/
          ${{ github.workspace }}/emulator.log
          ${{ github.workspace }}/emulator-startup.log

    - name: "Publish 'Instrumentation Results ${{ inputs.android-version }}' check suite."
      if: success() || failure()
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      with:
        check_name: 'ðŸ”” Test: Instrumentation Results ${{ inputs.android-version }}'
        comment_mode: off
        report_individual_runs: true
        test_changes_limit: 0
        junit_files: ${{ github.workspace }}/**/build/outputs/androidTest-results/connected/flavors/debugAndroidTest/TEST-*.xml

// Substitutions for project
configurations.configureEach { Configuration config ->
	config.resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector
				&& dependency.requested.group == "net.twisterrob.lib") {
			def module = dependency.requested.module.toString()
			if (!module.startsWith("twister-lib-android-")) {
				return
			}
			module = module.substring("twister-lib-android-".length())
			def subproject = findProject(":${module}")
			if (subproject != null) {
				dependency.useTarget(subproject)
			}
		}
	}
}

// Substitutions for project
configurations.configureEach { Configuration config ->
	config.resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector
				&& dependency.requested.group == "net.twisterrob.lib") {
			def module = dependency.requested.module.toString()
			if (!module.startsWith("twister-lib-")) {
				return
			}
			module = module.substring("twister-lib-".length())
			def lib = findProject(":lib:${module}")
			if (lib != null) {
				dependency.useTarget(lib)
			}
			def utils = findProject(":utils:${module}")
			if (utils != null) {
				dependency.useTarget(utils)
			}
			if (lib != null && utils != null) {
				throw new IllegalStateException("Ambiguous module: ${dependency.requested}")
			}
		}
	}
}

// Substitutions for Hamcrest
configurations.configureEach { Configuration config ->
	config.resolutionStrategy { ResolutionStrategy strategy ->
		strategy.dependencySubstitution {
			substitute(module(libs.deprecated.hamcrestCore.get().module.toString()))
					.using(module(libs.test.hamcrest.asProvider().get().toString()))
			substitute(module(libs.deprecated.hamcrestLibrary.get().module.toString()))
					.using(module(libs.test.hamcrest.asProvider().get().toString()))
		}
	}
}

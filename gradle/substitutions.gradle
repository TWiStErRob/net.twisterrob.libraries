// Substitutions for project
configurations.configureEach { Configuration config ->
	config.resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector
				&& dependency.requested.group == "net.twisterrob.lib") {
			def module = dependency.requested.module.toString()
			if (!module.startsWith("twister-lib-android-")) {
				return
			}
			module = module.substring("twister-lib-android-".length())
			def subproject = findProject(":${module}")
			if (subproject != null) {
				dependency.useTarget(subproject)
			}
		}
	}
}

// Substitutions for project
configurations.configureEach { Configuration config ->
	config.resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector
				&& dependency.requested.group == "net.twisterrob.lib") {
			def module = dependency.requested.module.toString()
			if (!module.startsWith("twister-lib-")) {
				return
			}
			module = module.substring("twister-lib-".length())
			def lib = findProject(":lib:${module}")
			if (lib != null) {
				dependency.useTarget(lib)
			}
			def utils = findProject(":utils:${module}")
			if (utils != null) {
				dependency.useTarget(utils)
			}
			if (lib != null && utils != null) {
				throw new IllegalStateException("Ambiguous module: ${dependency.requested}")
			}
		}
	}
}

// Substitutions for Guava on Android
configurations.configureEach { Configuration config ->
	if (!config.name.startsWith("androidTest") && !config.name.startsWith("debugAndroidTest")) return
	config.resolutionStrategy { ResolutionStrategy strategy ->
		strategy.dependencySubstitution {
			all { DependencySubstitution dep ->
				if (dep.requested instanceof ModuleComponentSelector
						&& dep.requested.module == "guava"
						&& dep.requested.group == "com.google.guava") {
					// need to use the Android dependency, otherwise Dex/R8/Jetifier fails
					def androidVersion = dep.requested.version.replace("-jre", "-android")
					dep.useTarget("com.google.guava:guava:${androidVersion}")
				}
			}
		}
	}
}

// Substitutions for Hamcrest
configurations.configureEach { Configuration config ->
	config.resolutionStrategy { ResolutionStrategy strategy ->
		strategy.dependencySubstitution {
			substitute(module(libs.deprecated.hamcrestCore.get().module.toString()))
					.using(module(libs.test.hamcrest.asProvider().get().toString()))
			substitute(module(libs.deprecated.hamcrestLibrary.get().module.toString()))
					.using(module(libs.test.hamcrest.asProvider().get().toString()))
		}
	}
}

// TODO is this right to be on bottom?
// Resolve dependency conflicts
configurations.configureEach { Configuration config ->
	config.resolutionStrategy {
		// 17.0 (shazamcrest 0.11, bumped in next release) vs 27.0.1-jre (robolectric 4.3.1)
		force(libs.guava.jre)
		// 2.0.1 (Espresso 3.0.1) vs 3.0.2 (latest)
		force(libs.annotations.jsr305)
	}
}

// Substitutions for project
configurations.configureEach { Configuration config ->
	config.resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector
				&& dependency.requested.group == "net.twisterrob.lib") {
			def module = dependency.requested.module.toString()
			if (!module.startsWith("twister-lib-android-")) {
				return
			}
			module = module.substring("twister-lib-android-".length())
			def subproject = findProject(":${module}")
			if (subproject != null) {
				dependency.useTarget(subproject)
			}
		}
	}
}

// Substitutions for project
configurations.configureEach { Configuration config ->
	config.resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector
				&& dependency.requested.group == "net.twisterrob.lib") {
			def module = dependency.requested.module.toString()
			if (!module.startsWith("twister-lib-")) {
				return
			}
			module = module.substring("twister-lib-".length())
			def lib = findProject(":lib:${module}")
			if (lib != null) {
				dependency.useTarget(lib)
			}
			def utils = findProject(":utils:${module}")
			if (utils != null) {
				dependency.useTarget(utils)
			}
			if (lib != null && utils != null) {
				throw new IllegalStateException("Ambiguous module: ${dependency.requested}")
			}
		}
	}
}

// Substitutions for support library
//configurations.all { Configuration config ->
//	if (!config.name.contains("lintClassPath")) {
//		config.resolutionStrategy { ResolutionStrategy strategy ->
//			strategy.dependencySubstitution { subst ->
//				[ "support-annotations", "support-v4", "appcompat-v7", "support-v13",
//				  "design", "customtabs", "preference-v7", "preference-v14",
//				  "recyclerview-v7", "cardview-v7", "gridlayout-v7", "percent", "palette-v7",
//				  "mediarouter-v7", "leanback-v17", "preference-leanback-v17", "recommendation",
//				  "support-vector-drawable", "animated-vector-drawable"
//				].each {
//					strategy.force("com.android.support:${it}:${VERSION_SUPPORT}")
//					subst.substitute(module("com.android.support:${it}"))
//					     .with module("com.android.support:${it}:${VERSION_SUPPORT}")
//				}
//			}
//		}
//	}
//}

// Substitutions for Guava on Android
configurations.configureEach { Configuration config ->
	if (!config.name.startsWith("androidTest") && !config.name.startsWith("debugAndroidTest")) return
	config.resolutionStrategy { ResolutionStrategy strategy ->
		strategy.dependencySubstitution {
			all { DependencySubstitution dep ->
				if (dep.requested instanceof ModuleComponentSelector
						&& dep.requested.module == "guava"
						&& dep.requested.group == "com.google.guava") {
					// need to use the Android dependency, otherwise Dex/R8/Jetifier fails
					def androidVersion = dep.requested.version.replace("-jre", "-android")
					dep.useTarget("com.google.guava:guava:${androidVersion}")
				}
			}
		}
	}
}

// Substitutions for Mockito on Android
configurations.configureEach { Configuration config ->
	if (!config.name.startsWith("androidTest") && !config.name.startsWith("debugAndroidTest")) return
	config.resolutionStrategy { ResolutionStrategy strategy ->
		// 1.9.10 (powermock 2.0.7) vs 1.10.5 (mockito 3.3.3)
		force(libs.test.bytebuddy)
		// 1.9.10 (powermock 2.0.7) vs 1.10.5 (mockito 3.3.3)
		force(libs.test.bytebuddy)
		// com.android.builder.dexing.DexArchiveBuilderException:
		//     Failed to process gradle\caches\modules-2\files-2.1\org.objenesis\objenesis\3.0.1\11cfac598df9dc48bb9ed9357ed04212694b7808\objenesis-3.0.1.jar
		//     Caused by: com.android.builder.dexing.DexArchiveBuilderException: Error while dexing.
		//     Caused by: com.android.tools.r8.CompilationFailedException: Compilation failed to complete
		//     Caused by: com.android.tools.r8.utils.AbortException: Error:
		//     MethodHandle.invoke and MethodHandle.invokeExact are only supported starting with Android O (--min-api 26)
		// 3.0.1 (powermock 2.0.7) vs 2.6 (mockito 3.3.3)
		force(libs.test.android.objenesis)
	}
}

// Substitutions for Hamcrest
configurations.configureEach { Configuration config ->
	config.resolutionStrategy { ResolutionStrategy strategy ->
		strategy.dependencySubstitution {
			substitute(module(libs.test.hamcrest.core.get().module.toString()))
					.using(module(libs.test.hamcrest.asProvider().get().toString()))
			substitute(module(libs.test.hamcrest.library.get().module.toString()))
					.using(module(libs.test.hamcrest.asProvider().get().toString()))
		}
	}
}

// TODO is this right to be on bottom?
// Resolve dependency conflicts
configurations.configureEach { Configuration config ->
	config.resolutionStrategy {
		// use latest version, hamcrest-junit refers to 4.12
		force(libs.test.junit)
		// powermock refers to older
		force(libs.test.mockito)
		// 3.0.1 (powermock 2.0.7) vs 2.6 (mockito 3.3.3)
		force(libs.test.objenesis)
		// 1.9.10 (powermock 2.0.7) vs 1.10.5 (mockito 3.3.3)
		force(libs.test.bytebuddy)
		// 1.9.10 (powermock 2.0.7) vs 1.10.5 (mockito 3.3.3)
		force(libs.test.bytebuddyAgent)
		// 17.0 (shazamcrest 0.11, bumped in next release) vs 27.0.1-jre (robolectric 4.3.1)
		force(libs.guava.jre)
		// Robolectric has inconsistent internal dependencies (4.3.1): 1.0.4, 1.4.2, 1.5.15
		force(libs.test.android.robolectricPlexus)
		// 2.0.1 (Espresso 3.0.1) vs 3.0.2 (latest)
		force(libs.annotations.jsr305)
	}
}
